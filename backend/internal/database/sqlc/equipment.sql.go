// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: equipment.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEquipment = `-- name: CreateEquipment :one
INSERT INTO equipment (id, manufacturer, model_number, equipment_type, btu, efficiency_rating, price, equipment_length, equipment_width, equipment_height)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
)
RETURNING id, manufacturer, model_number, equipment_type, btu, efficiency_rating, equipment_length, equipment_width, equipment_height, price
`

type CreateEquipmentParams struct {
	ID               uuid.UUID
	Manufacturer     sql.NullString
	ModelNumber      string
	EquipmentType    NullEquipmentType
	Btu              sql.NullInt32
	EfficiencyRating sql.NullString
	Price            sql.NullString
	EquipmentLength  sql.NullString
	EquipmentWidth   sql.NullString
	EquipmentHeight  sql.NullString
}

func (q *Queries) CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, createEquipment,
		arg.ID,
		arg.Manufacturer,
		arg.ModelNumber,
		arg.EquipmentType,
		arg.Btu,
		arg.EfficiencyRating,
		arg.Price,
		arg.EquipmentLength,
		arg.EquipmentWidth,
		arg.EquipmentHeight,
	)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Manufacturer,
		&i.ModelNumber,
		&i.EquipmentType,
		&i.Btu,
		&i.EfficiencyRating,
		&i.EquipmentLength,
		&i.EquipmentWidth,
		&i.EquipmentHeight,
		&i.Price,
	)
	return i, err
}

const getEquipment = `-- name: GetEquipment :many
SELECT id, manufacturer, model_number, equipment_type, btu, efficiency_rating, equipment_length, equipment_width, equipment_height, price FROM equipment
WHERE equipment_type = $1
    AND equipment_width = $2
`

type GetEquipmentParams struct {
	EquipmentType  NullEquipmentType
	EquipmentWidth sql.NullString
}

func (q *Queries) GetEquipment(ctx context.Context, arg GetEquipmentParams) ([]Equipment, error) {
	rows, err := q.db.QueryContext(ctx, getEquipment, arg.EquipmentType, arg.EquipmentWidth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Equipment
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.Manufacturer,
			&i.ModelNumber,
			&i.EquipmentType,
			&i.Btu,
			&i.EfficiencyRating,
			&i.EquipmentLength,
			&i.EquipmentWidth,
			&i.EquipmentHeight,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
