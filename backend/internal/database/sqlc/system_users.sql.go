// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: system_users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSystemUser = `-- name: CreateSystemUser :one
INSERT INTO system_users (id, created_at, form_data, needed_min_btu, needed_max_btu)
VALUES ($1, NOW(), $2, $3, $4)
RETURNING id, created_at, form_data, needed_min_btu, needed_max_btu
`

type CreateSystemUserParams struct {
	ID           uuid.UUID
	FormData     pqtype.NullRawMessage
	NeededMinBtu sql.NullString
	NeededMaxBtu sql.NullString
}

func (q *Queries) CreateSystemUser(ctx context.Context, arg CreateSystemUserParams) (SystemUser, error) {
	row := q.db.QueryRowContext(ctx, createSystemUser,
		arg.ID,
		arg.FormData,
		arg.NeededMinBtu,
		arg.NeededMaxBtu,
	)
	var i SystemUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.FormData,
		&i.NeededMinBtu,
		&i.NeededMaxBtu,
	)
	return i, err
}

const getSystemUser = `-- name: GetSystemUser :one
SELECT id, created_at, form_data, needed_min_btu, needed_max_btu FROM system_users
WHERE id = $1
`

func (q *Queries) GetSystemUser(ctx context.Context, id uuid.UUID) (SystemUser, error) {
	row := q.db.QueryRowContext(ctx, getSystemUser, id)
	var i SystemUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.FormData,
		&i.NeededMinBtu,
		&i.NeededMaxBtu,
	)
	return i, err
}
