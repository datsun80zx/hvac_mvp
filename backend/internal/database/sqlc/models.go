// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type EquipmentType string

const (
	EquipmentTypeFurnace          EquipmentType = "furnace"
	EquipmentTypeOutdoorCondenser EquipmentType = "outdoor_condenser"
	EquipmentTypeEvaporatorCoil   EquipmentType = "evaporator_coil"
)

func (e *EquipmentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EquipmentType(s)
	case string:
		*e = EquipmentType(s)
	default:
		return fmt.Errorf("unsupported scan type for EquipmentType: %T", src)
	}
	return nil
}

type NullEquipmentType struct {
	EquipmentType EquipmentType
	Valid         bool // Valid is true if EquipmentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEquipmentType) Scan(value interface{}) error {
	if value == nil {
		ns.EquipmentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EquipmentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEquipmentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EquipmentType), nil
}

type CompatibleSystem struct {
	ID          uuid.UUID
	FurnaceID   uuid.UUID
	CondenserID uuid.UUID
	CoilID      uuid.UUID
	TotalPrice  sql.NullString
}

type Equipment struct {
	ID               uuid.UUID
	Manufacturer     sql.NullString
	ModelNumber      string
	EquipmentType    NullEquipmentType
	Btu              sql.NullInt32
	EfficiencyRating sql.NullString
	EquipmentLength  sql.NullString
	EquipmentWidth   sql.NullString
	EquipmentHeight  sql.NullString
	Price            sql.NullString
}

type SystemUser struct {
	ID           uuid.UUID
	CreatedAt    sql.NullTime
	FormData     pqtype.NullRawMessage
	NeededMinBtu sql.NullString
	NeededMaxBtu sql.NullString
}
