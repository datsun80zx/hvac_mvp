// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: compatible_systems.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findCompatibleSystems = `-- name: FindCompatibleSystems :many
SELECT
  f.id   AS furnace_id,
  f.manufacturer   AS furnace_manufacturer,
  f.btu            AS furnace_btu,
  f.efficiency_rating AS furnace_afue,
  f.price          AS furnace_price,

  c.id   AS condenser_id,
  c.manufacturer   AS condenser_manufacturer,
  c.btu            AS condenser_btu,
  c.efficiency_rating AS condenser_afue,
  c.price          AS condenser_price,

  co.id  AS coil_id,
  co.manufacturer  AS coil_manufacturer,
  co.btu           AS coil_btu,
  co.efficiency_rating AS coil_afue,
  co.price         AS coil_price,

  CAST((f.price + c.price + co.price) AS DECIMAL) AS total_price
FROM equipment AS f
  JOIN equipment AS c  ON c.equipment_type = 'outdoor_condenser'
  JOIN equipment AS co ON co.equipment_type = 'evaporator_coil'
WHERE
  f.equipment_type = 'furnace'
  AND f.equipment_width = $1
  AND co.equipment_width = $1
  AND c.btu >= $2
  AND c.btu <= $3
  AND co.btu >= $2
  AND co.btu <= $3
ORDER BY total_price ASC
`

type FindCompatibleSystemsParams struct {
	EquipmentWidth sql.NullString
	Btu            sql.NullInt32
	Btu_2          sql.NullInt32
}

type FindCompatibleSystemsRow struct {
	FurnaceID             uuid.UUID
	FurnaceManufacturer   sql.NullString
	FurnaceBtu            sql.NullInt32
	FurnaceAfue           sql.NullString
	FurnacePrice          sql.NullString
	CondenserID           uuid.UUID
	CondenserManufacturer sql.NullString
	CondenserBtu          sql.NullInt32
	CondenserAfue         sql.NullString
	CondenserPrice        sql.NullString
	CoilID                uuid.UUID
	CoilManufacturer      sql.NullString
	CoilBtu               sql.NullInt32
	CoilAfue              sql.NullString
	CoilPrice             sql.NullString
	TotalPrice            string
}

func (q *Queries) FindCompatibleSystems(ctx context.Context, arg FindCompatibleSystemsParams) ([]FindCompatibleSystemsRow, error) {
	rows, err := q.db.QueryContext(ctx, findCompatibleSystems, arg.EquipmentWidth, arg.Btu, arg.Btu_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCompatibleSystemsRow
	for rows.Next() {
		var i FindCompatibleSystemsRow
		if err := rows.Scan(
			&i.FurnaceID,
			&i.FurnaceManufacturer,
			&i.FurnaceBtu,
			&i.FurnaceAfue,
			&i.FurnacePrice,
			&i.CondenserID,
			&i.CondenserManufacturer,
			&i.CondenserBtu,
			&i.CondenserAfue,
			&i.CondenserPrice,
			&i.CoilID,
			&i.CoilManufacturer,
			&i.CoilBtu,
			&i.CoilAfue,
			&i.CoilPrice,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
